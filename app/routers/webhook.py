from flask import Blueprint, request, jsonify
from app.db import User, Messages
from app.utils import add_task, AssemMessage, AssemAI

weebhook_bp = Blueprint('weebhook_bp', __name__)



@weebhook_bp.route('/webhook/whatsapp', methods=['POST'])
def webhook():
    try:
        post_data = request.get_json()
        if not post_data or 'messages' not in post_data:
            return jsonify({'status': False, 'error': 'Invalid payload'}), 400

        data = post_data['messages'][0]
        phone = data.get('from')
        name = data.get('from_name')
        chat_id = data.get('chat_id')

        if not phone or not chat_id:
            return jsonify({'status': False, 'error': 'Phone or Chat ID missing'}), 400

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–∞–∑—É
        user = User(fullname=name, phone=phone, chat_id=chat_id)
        user.save_to_db()
        message = AssemMessage()
        if 'text' in data:
            message_body = data['text'].get('body')
            if message_body:
                message = Messages(
                    user_id=user.id,
                    role='user',
                    content=message_body,
                    tool_call_id=None,
                )
                message.save_to_db()
                context = message.get_context_for_ai(chat_id=chat_id)
                api_key = ''
                ai = AssemAI(api_key=api_key)
                text = ai.generate_answer(context)
                # add_task(chat_id)
                hand = AssemMessage()
                hand.send_text(text, chat_id)
                aitext = Messages(
                    user_id=user.id,
                    role='assistant',
                    content=text,
                    tool_call_id=None,
                )
                aitext.save_to_db()
                return jsonify({'status': True, 'data': 'Thanks guys! We take that!', 'context': context})
        elif 'image' in data:
            ans = ('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫. '
                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞–º–∏, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É –≤–∞–º! üòä')
            response = message.send_text(ans, chat_id)
        elif 'voice' in data:
            ans = ('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —è –Ω–µ –º–æ–≥—É —Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –Ω–æ –±—É–¥—É —Ä–∞–¥, '
                   '–µ—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Ç–µ–∫—Å—Ç–æ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –≤–∞–º –ø–æ–º–æ—á—å! ')
            response = message.send_text(ans, chat_id)
        else:
            ans = (
                '–Ø –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ. '
                '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ')
            response = message.send_text(ans, chat_id)

        return jsonify({'status': True, 'data': 'Thanks guys! We take that!', 'a': ans})

    except Exception as e:
        return jsonify({'status': False, 'error': str(e)}), 500
